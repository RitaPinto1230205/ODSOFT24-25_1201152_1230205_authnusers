pipeline {
    agent any

    environment {
        MAVEN_HOME = '/opt/homebrew'
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        DOCKER_BINARY = '/usr/local/bin/docker'
        SERVER_PORT = '2228'
        IMAGE_NAME = 'ghcr.io/ritapinto1230205/lmsusers'
        IMAGE_TAG = 'latest'
        GITHUB_TOKEN_ID = 'GITHUB_TOKEN'
        DEPLOYMENT_APPROVED = false
    }

    stages {
        stage('Install Java 21.0.4-amzn with SDKMAN!') {
            steps {
                script {
                    sh '''
                        # Install SDKMAN! if necessary
                        if [ ! -d "$HOME/.sdkman" ]; then
                          curl -s "https://get.sdkman.io" | bash
                          source "$HOME/.sdkman/bin/sdkman-init.sh"
                        fi
                        # Install Java 21.0.4-amzn
                        source "$HOME/.sdkman/bin/sdkman-init.sh"
                        sdk install java 21.0.4-amzn || true
                        sdk default java 21.0.4-amzn
                    '''
                }
            }
        }

        stage('Check Out') {
            steps {
                echo 'Checking out the latest code...'
                checkout scm
            }
        }

        stage('Debug Environment') {
            steps {
                dir('lms-authnusers') {
                    sh 'env'
                }
            }
        }

        stage('Check Docker') {
            steps {
                dir('lms-authnusers') {
                    sh 'docker --version'
                }
            }
        }

        stage('Clean and Build Project') {
            steps {
                dir('lms-authnusers') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn clean install
                        """
                    }
                }
            }
        }

        stage('Run Tests Against Container') {
            steps {
                dir('lms-authnusers') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn verify -Dtest.container.url=http://localhost:${SERVER_PORT}
                        """
                    }
                }
            }
        }

        stage('Deploy to Development Environment') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Deploying to Dev environment..."
                        sh """
                            docker-compose -f docker-compose-dev.yml down --remove-orphans
                            docker-compose -f docker-compose-dev.yml up -d --force-recreate
                        """
                    }
                }
            }
        }

        stage('Test on Development Environment') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Running tests on Dev..."
                        def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                        if (!success) {
                            echo 'Test failed on Development Environment.'
                            rollback('dev')
                            return
                        } else {
                            echo 'Tests passed on Dev.'
                        }
                    }
                }
            }
        }

        stage('Approval to Deploy to Testing Environment') {
            steps {
                input message: 'Approve deploy to Test?', parameters: [
                    booleanParam(defaultValue: false, description: 'Approve deploy?', name: 'DeployApproval')
                ]
                script {
                    DEPLOYMENT_APPROVED = params.DeployApproval
                }
            }
        }

        stage('Deploy to Testing Environment') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Deploying to Test environment..."
                        sh """
                            docker-compose -f docker-compose-test.yml down --remove-orphans
                            docker-compose -f docker-compose-test.yml up -d --force-recreate
                        """
                    }
                }
            }
        }

        stage('Test on Testing Environment') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Running tests on Test..."
                        def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                        if (!success) {
                            echo 'Test failed on Testing Environment. Rolling back...'
                            rollback('test')
                            return
                        } else {
                            echo 'Tests passed on Test.'
                        }
                    }
                }
            }
        }

        stage('Approval to Deploy to Production Environment') {
            steps {
                input message: 'Approve deploy to Prod?', parameters: [
                    booleanParam(defaultValue: false, description: 'Approve deploy?', name: 'DeployApproval')
                ]
                script {
                    DEPLOYMENT_APPROVED = params.DeployApproval
                }
            }
        }

        stage('Deploy to Production Environment') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Deploying to Prod environment..."
                        sh """
                            docker-compose -f docker-compose-prod.yml down --remove-orphans
                            docker-compose -f docker-compose-prod.yml up -d --force-recreate
                        """
                    }
                }
            }
        }

        stage('Test on Production Environment') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Running tests on Prod..."
                        def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                        if (!success) {
                            echo 'Test failed on Prod. Rolling back...'
                            rollback('prod')
                            return
                        } else {
                            echo 'Tests passed on Prod.'
                        }
                    }
                }
            }
        }

        stage('Scale Up and Down Services') {
            steps {
                script {
                    def scaling = input(
                        message: 'Specify scaling action and instances for users:',
                        parameters: [
                            choice(choices: ['Scale Up', 'Scale Down'], description: 'Choose scaling action.', name: 'scaleAction'),
                            string(defaultValue: '1', description: 'Number of instances for users', name: 'scaleUsers')
                        ]
                    )

                    echo "Scaling action: ${scaling.scaleAction}"
                    echo "Scaling services: users=${scaling.scaleUsers}"

                    dir('lms-authnusers') {
                        echo "Scaling services..."
                        sh """
                            docker-compose -f docker-compose-test.yml down --remove-orphans
                        """
                        if (scaling.scaleAction == 'Scale Up') {
                            sh """
                                docker-compose -f docker-compose-test.yml up --scale users=${scaling.scaleUsers} -d
                            """
                        } else {
                            sh """
                                docker-compose -f docker-compose-test.yml up --scale users=0 -d
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo 'Building Docker image...'
                        sh """
                            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('lms-authnusers') {
                    script {
                        withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                            echo 'Pushing Docker image to registry...'
                            sh """
                                docker push ${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }

            stage('Zero Downtime Deployment') {
                   steps {
                       dir('lms-authnusers') {
                           script {
                               echo 'Starting Zero Downtime Deployment...'

                               // Inicia a nova versão do serviço com o prefixo "new_version"
                               sh """
                                   docker-compose -f docker-compose-prod.yml -p new_version up -d --build
                               """

                               // Verifica se a nova versão passou nos testes de saúde
                               def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                               if (!success) {
                                   echo 'New version failed health checks. Aborting deployment.'

                                   sh """
                                       docker-compose -f docker-compose-prod.yml -p new_version down
                                   """
                                   error('Deployment failed.')
                               }

                               echo 'Switching to the new version...'

                               sh """
                                   docker-compose -f docker-compose-prod.yml -p old_version down --remove-orphans
                                   docker-compose -f docker-compose-prod.yml -p new_version up -d
                               """

                               echo 'Deployment completed with zero downtime!'
                           }
                       }
                   }
               }
            }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

def rollback(env) {
    echo "Rolling back to the previous version in the ${env} environment..."
    sh """
        docker-compose -f docker-compose-${env}.yml down --remove-orphans
        docker-compose -f docker-compose-${env}.yml up -d --force-recreate
    """
    echo "Rollback completed in the ${env} environment."
}
