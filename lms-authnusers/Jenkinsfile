pipeline {
    agent any

    environment {
        MAVEN_HOME = '/opt/homebrew'
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        DOCKER_BINARY = '/usr/local/bin/docker'
        SERVER_PORT = '2228'
        IMAGE_NAME = 'ghcr.io/ritapinto1230205/lmsusers'
        IMAGE_TAG = 'latest'
        GITHUB_TOKEN_ID = 'GITHUB_TOKEN'
        DEPLOYMENT_APPROVED = false
        ENVIRONMENT = 'dev'
    }

    stages {
        stage('Install Java 21.0.4-amzn with SDKMAN!') {
            steps {
                script {
                    sh '''
                        # Instalar SDKMAN! (se necessário)
                        if [ ! -d "$HOME/.sdkman" ]; then
                          curl -s "https://get.sdkman.io" | bash
                          source "$HOME/.sdkman/bin/sdkman-init.sh"
                        fi
                        # Instalar a versão do Java 21.0.4-amzn
                        source "$HOME/.sdkman/bin/sdkman-init.sh"
                        sdk install java 21.0.4-amzn || true  # Ignora se já estiver instalado
                        sdk default java 21.0.4-amzn
                    '''
                }
            }
        }

        stage('Check Out') {
            steps {
                echo 'Checking out the latest code...'
                checkout scm
            }
        }

        stage('Debug Environment') {
            steps {
                dir('lms-authnusers') {
                    sh 'env'
                }
            }
        }

        stage('Check Docker') {
            steps {
                dir('lms-authnusers') {
                    sh 'docker --version'
                }
            }
        }

        stage('Clean and Build Project') {
            steps {
                dir('lms-authnusers') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn clean install
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('lms-authnusers') {
                      script {
                      withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                                    if (isUnix()) {
                                        sh """
                                            echo "$GITHUB_TOKEN" | docker login ghcr.io -u RitaPinto1230205 --password-stdin
                                            docker build -t ${IMAGE_NAME}:latest .
                                        """
                                    } else {
                                        bat """
                                            echo %GITHUB_TOKEN% | docker login ghcr.io -u RitaPinto1230205 --password-stdin
                                            docker build -t ${IMAGE_NAME}:latest .
                                        """
                                    }
                                }
                            }
                }
            }
        }

        stage('Run Tests Against Container') {
            steps {
                dir('lms-authnusers') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn verify -Dtest.container.url=http://localhost:${SERVER_PORT}
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('lms-authnusers') {
                    script {
                        withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                            sh """
                                docker push ${IMAGE_NAME}:latest
                            """
                        }
                    }
                }
            }
        }

        stage('Scale Up and Down Services') {
            steps {
                script {
                    def scaling = input(
                        message: 'Specify scaling action and instances for users01 and users02:',
                        parameters: [
                            choice(
                                choices: ['Scale Up', 'Scale Down'],
                                description: 'Choose whether to scale up or scale down the services.',
                                name: 'scaleAction'
                            ),
                            string(
                                defaultValue: '4',
                                description: 'Number of instances for users01',
                                name: 'scaleUsers01'
                            ),
                            string(
                                defaultValue: '4',
                                description: 'Number of instances for users02',
                                name: 'scaleUsers02'
                            )
                        ]
                    )

                    echo "Scaling action: ${scaling.scaleAction}"
                    echo "Scaling services: users01=${scaling.scaleUsers01}, users02=${scaling.scaleUsers02}"

                    dir('lms-authnusers') {
                        echo "Scaling down existing services..."
                        sh """
                            docker-compose -f docker-compose-test.yml down --remove-orphans
                        """

                        if (scaling.scaleAction == 'Scale Up') {
                            echo "Scaling up services..."
                            sh """
                                docker-compose -f docker-compose-test.yml up --scale users01=${scaling.scaleUsers01} --scale users02=${scaling.scaleUsers02} -d
                            """
                        } else {
                            echo "Scaling down services..."
                            sh """
                                docker-compose -f docker-compose-test.yml up --scale users01=0 --scale users02=0 -d
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Dev') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Deploying to Dev environment..."
                        sh """
                            docker-compose -f docker-compose-dev.yml down --remove-orphans
                            docker-compose -f docker-compose-dev.yml up -d --force-recreate
                        """
                    }
                }
            }
        }

        stage('Test on Dev') {
            steps {
                script {
                    echo "Running tests on Dev..."
                    def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                    if (!success) {
                        echo 'Test failed on Dev. Aborting pipeline.'
                        currentBuild.result = 'FAILURE'
                        return
                    } else {
                        echo 'Tests passed on Dev.'
                    }
                }
            }
        }

        stage('Wait for Manual Approval to Deploy to Test') {
            steps {
                input message: 'Approve deploy to Test?', parameters: [
                    booleanParam(defaultValue: false, description: 'Approve deploy?', name: 'DeployApproval')
                ]
                script {
                    DEPLOYMENT_APPROVED = params.DeployApproval
                }
            }
        }

        stage('Deploy to Test') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Deploying to Test environment..."
                        sh """
                            docker-compose -f docker-compose-test.yml down --remove-orphans
                            docker-compose -f docker-compose-test.yml up -d --force-recreate
                        """
                    }
                }
            }
        }

        stage('Test on Test') {
            steps {
                script {
                    echo "Running tests on Test..."
                    def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                    if (!success) {
                        echo 'Test failed on Test. Aborting pipeline.'
                        currentBuild.result = 'FAILURE'
                        return
                    } else {
                        echo 'Tests passed on Test.'
                    }
                }
            }
        }

        stage('Wait for Manual Approval to Deploy to Prod') {
            steps {
                input message: 'Approve deploy to Prod?', parameters: [
                    booleanParam(defaultValue: false, description: 'Approve deploy?', name: 'DeployApproval')
                ]
                script {
                    DEPLOYMENT_APPROVED = params.DeployApproval
                }
            }
        }

        stage('Deploy to Prod') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Deploying to Prod environment..."
                        sh """
                            docker-compose -f docker-compose-prod.yml down --remove-orphans
                            docker-compose -f docker-compose-prod.yml up -d --force-recreate
                        """
                    }
                }
            }
        }

        stage('Test on Prod') {
            steps {
                dir('lms-authnusers') {
                    script {
                        echo "Running tests on Prod..."
                        def success = sh(script: "curl -f http://localhost:${SERVER_PORT}/health", returnStatus: true) == 0
                        if (!success) {
                            echo 'Test failed on Prod. Rolling back...'
                            sh """
                                docker-compose -f docker-compose-prod.yml down
                                docker-compose -f docker-compose-prod.yml up -d --no-deps --scale book01=2 --scale book02=2
                            """
                        } else {
                            echo 'Tests passed on Prod.'
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
